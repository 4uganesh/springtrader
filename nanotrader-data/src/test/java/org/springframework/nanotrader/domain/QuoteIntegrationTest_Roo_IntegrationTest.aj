// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.springframework.nanotrader.domain;

import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.nanotrader.domain.QuoteDataOnDemand;
import org.springframework.nanotrader.domain.QuoteIntegrationTest;
import org.springframework.nanotrader.repository.QuoteRepository;
import org.springframework.nanotrader.service.QuoteService;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect QuoteIntegrationTest_Roo_IntegrationTest {
    
    declare @type: QuoteIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: QuoteIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: QuoteIntegrationTest: @Transactional;
    
    @Autowired
    private QuoteDataOnDemand QuoteIntegrationTest.dod;
    
    @Autowired
    QuoteService QuoteIntegrationTest.quoteService;
    
    @Autowired
    QuoteRepository QuoteIntegrationTest.quoteRepository;
    
    @Test
    public void QuoteIntegrationTest.testCountAllQuotes() {
        Assert.assertNotNull("Data on demand for 'Quote' failed to initialize correctly", dod.getRandomQuote());
        long count = quoteService.countAllQuotes();
        Assert.assertTrue("Counter for 'Quote' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void QuoteIntegrationTest.testFindQuote() {
        Quote obj = dod.getRandomQuote();
        Assert.assertNotNull("Data on demand for 'Quote' failed to initialize correctly", obj);
        Integer id = obj.getQuoteid();
        Assert.assertNotNull("Data on demand for 'Quote' failed to provide an identifier", id);
        obj = quoteService.findQuote(id);
        Assert.assertNotNull("Find method for 'Quote' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Quote' returned the incorrect identifier", id, obj.getQuoteid());
    }
    
    @Test
    public void QuoteIntegrationTest.testFindAllQuotes() {
        Assert.assertNotNull("Data on demand for 'Quote' failed to initialize correctly", dod.getRandomQuote());
        long count = quoteService.countAllQuotes();
        Assert.assertTrue("Too expensive to perform a find all test for 'Quote', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Quote> result = quoteService.findAllQuotes();
        Assert.assertNotNull("Find all method for 'Quote' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Quote' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void QuoteIntegrationTest.testFindQuoteEntries() {
        Assert.assertNotNull("Data on demand for 'Quote' failed to initialize correctly", dod.getRandomQuote());
        long count = quoteService.countAllQuotes();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Quote> result = quoteService.findQuoteEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Quote' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Quote' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void QuoteIntegrationTest.testSaveQuote() {
        Assert.assertNotNull("Data on demand for 'Quote' failed to initialize correctly", dod.getRandomQuote());
        Quote obj = dod.getNewTransientQuote(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Quote' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Quote' identifier to be null", obj.getQuoteid());
        quoteService.saveQuote(obj);
        quoteRepository.flush();
        Assert.assertNotNull("Expected 'Quote' identifier to no longer be null", obj.getQuoteid());
    }
    
    @Test
    public void QuoteIntegrationTest.testDeleteQuote() {
        Quote obj = dod.getRandomQuote();
        Assert.assertNotNull("Data on demand for 'Quote' failed to initialize correctly", obj);
        Integer id = obj.getQuoteid();
        Assert.assertNotNull("Data on demand for 'Quote' failed to provide an identifier", id);
        obj = quoteService.findQuote(id);
        quoteService.deleteQuote(obj);
        quoteRepository.flush();
        Assert.assertNull("Failed to remove 'Quote' with identifier '" + id + "'", quoteService.findQuote(id));
    }
    
}
