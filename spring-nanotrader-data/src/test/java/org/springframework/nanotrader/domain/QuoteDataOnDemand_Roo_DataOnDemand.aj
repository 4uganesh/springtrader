// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.springframework.nanotrader.domain;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.nanotrader.domain.Quote;
import org.springframework.nanotrader.domain.QuoteDataOnDemand;
import org.springframework.nanotrader.repository.QuoteRepository;
import org.springframework.nanotrader.service.QuoteService;
import org.springframework.stereotype.Component;

privileged aspect QuoteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: QuoteDataOnDemand: @Component;
    
    private Random QuoteDataOnDemand.rnd = new SecureRandom();
    
    private List<Quote> QuoteDataOnDemand.data;
    
    @Autowired
    QuoteService QuoteDataOnDemand.quoteService;
    
    @Autowired
    QuoteRepository QuoteDataOnDemand.quoteRepository;
    
    public Quote QuoteDataOnDemand.getNewTransientQuote(int index) {
        Quote obj = new Quote();
        setChange1(obj, index);
        setCompanyname(obj, index);
        setHigh(obj, index);
        setLow(obj, index);
        setOpen1(obj, index);
        setPrice(obj, index);
        setSymbol(obj, index);
        setVolume(obj, index);
        return obj;
    }
    
    public void QuoteDataOnDemand.setChange1(Quote obj, int index) {
        BigDecimal change1 = BigDecimal.valueOf(index);
        obj.setChange1(change1);
    }
    
    public void QuoteDataOnDemand.setCompanyname(Quote obj, int index) {
        String companyname = "companyname_" + index;
        if (companyname.length() > 250) {
            companyname = companyname.substring(0, 250);
        }
        obj.setCompanyname(companyname);
    }
    
    public void QuoteDataOnDemand.setHigh(Quote obj, int index) {
        BigDecimal high = BigDecimal.valueOf(index);
        if (high.compareTo(new BigDecimal("999999999999.99")) == 1) {
            high = new BigDecimal("999999999999.99");
        }
        obj.setHigh(high);
    }
    
    public void QuoteDataOnDemand.setLow(Quote obj, int index) {
        BigDecimal low = BigDecimal.valueOf(index);
        if (low.compareTo(new BigDecimal("999999999999.99")) == 1) {
            low = new BigDecimal("999999999999.99");
        }
        obj.setLow(low);
    }
    
    public void QuoteDataOnDemand.setOpen1(Quote obj, int index) {
        BigDecimal open1 = BigDecimal.valueOf(index);
        if (open1.compareTo(new BigDecimal("999999999999.99")) == 1) {
            open1 = new BigDecimal("999999999999.99");
        }
        obj.setOpen1(open1);
    }
    
    public void QuoteDataOnDemand.setPrice(Quote obj, int index) {
        BigDecimal price = BigDecimal.valueOf(index);
        if (price.compareTo(new BigDecimal("999999999999.99")) == 1) {
            price = new BigDecimal("999999999999.99");
        }
        obj.setPrice(price);
    }
    
    public void QuoteDataOnDemand.setSymbol(Quote obj, int index) {
        String symbol = "symbol_" + index;
        if (symbol.length() > 250) {
            symbol = new Random().nextInt(10) + symbol.substring(1, 250);
        }
        obj.setSymbol(symbol);
    }
    
    public void QuoteDataOnDemand.setVolume(Quote obj, int index) {
        BigDecimal volume = BigDecimal.valueOf(index);
        obj.setVolume(volume);
    }
    
    public Quote QuoteDataOnDemand.getSpecificQuote(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Quote obj = data.get(index);
        Integer id = obj.getQuoteid();
        return quoteService.findQuote(id);
    }
    
    public Quote QuoteDataOnDemand.getRandomQuote() {
        init();
        Quote obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getQuoteid();
        return quoteService.findQuote(id);
    }
    
    public boolean QuoteDataOnDemand.modifyQuote(Quote obj) {
        return false;
    }
    
    public void QuoteDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = quoteService.findQuoteEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Quote' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Quote>();
        for (int i = 0; i < 10; i++) {
            Quote obj = getNewTransientQuote(i);
            try {
                quoteService.saveQuote(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            quoteRepository.flush();
            data.add(obj);
        }
    }
    
}
