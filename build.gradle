description = 'Spring Nanotrader'

apply plugin: 'base'
apply plugin: 'idea'

buildscript {
	repositories { maven { url 'https://repo.springsource.org/plugins-snapshot' } }
	dependencies { classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.1.2-SNAPSHOT' }
}

allprojects {
	group = 'org.springframework.nanotrader'

	repositories {
		maven { url 'http://repo.springsource.org/libs-milestone' }
		maven { url 'http://spring-roo-repository.springsource.org/release' }
		mavenCentral()
		maven { url 'http://maven.springframework.org/snapshot' }
	}
}



subprojects { subproject ->

	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin:'eclipse-wtp'

	// ensure JDK 6 compatibility (GRADLE-18; INT-1578)
	sourceCompatibility=1.6
	targetCompatibility=1.6

	aspectjVersion = '1.6.12.M2'
	cglibVersion = '2.2'
	commonsNetVersion = '3.0.1'
	commonsLangVersion = '3.0.1'
	easymockVersion = '2.3'
	groovyVersion = '1.8.5'
	jacksonVersion = '1.9.2'
	javaxActivationVersion = '1.1.1'
	junitVersion = '4.8.2'
	log4jVersion = '1.2.12'
	mockitoVersion = '1.9.0'
	springVersion = '3.1.0.RELEASE'
	springAmqpVersion = '1.0.0.RELEASE'
	springDataMongoVersion = '1.0.0.RELEASE'
	springDataRedisVersion = '1.0.0.RELEASE'
	springGemfireVersion = '1.1.0.RELEASE'
	springSecurityVersion = '3.1.0.RELEASE'
	springSocialTwitterVersion = '1.0.1.RELEASE'
	springWsVersion = '2.0.3.RELEASE'
	springIntegrationVersion = '2.1.0.RELEASE'
	springRooVersion = '1.2.0.RELEASE'
	javaxInjectVersion = '1'
	servletApiVersion = '2.5'
	dozerVersion='5.3.2'
	webAppDirName = 'src/main/webapp'
	// add the natures and builders to your project
	eclipse.project {
		natures 'org.eclipse.wst.common.project.facet.core.nature', 'org.eclipse.wst.common.modulecore.ModuleCoreNature'
		natures += 'org.springframework.ide.eclipse.core.springnature'
		buildCommand 'org.eclipse.wst.common.project.facet.core.builder'
		buildCommand 'org.eclipse.wst.validation.validationbuilder'
	}

	// add libraries to deployment assembly
	eclipse {
		classpath {
			file {
				withXml {
					def assembly = new Node(null, 'attributes')
					assembly.appendNode(
							'attribute',
							[name: "org.eclipse.jst.component.dependency", value: "/WEB-INF/lib"],
							null)

					def node = it.asNode()
					def children = node.children()
					children.each {
						def kind = it.attributes().get('kind')
						if (kind != null && kind == 'lib') {
							it.append(assembly)
						}
					}
				}
			}
		}
	}


	sourceSets {
		test {
			resources {
				srcDirs = [
					'src/test/resources',
					'src/test/java'
				]
			}
		}
	}

	// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
	// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
	configurations { jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
	}

	// dependencies that are common across all java projects
	dependencies {
		compile "org.slf4j:slf4j-log4j12:1.6.4"
		testCompile "cglib:cglib-nodep:$cglibVersion"
		testCompile "junit:junit-dep:$junitVersion"
		testCompile "log4j:log4j:$log4jVersion"
		testCompile "org.easymock:easymock:$easymockVersion"
		testCompile "org.easymock:easymockclassextension:$easymockVersion"
		testCompile "org.hamcrest:hamcrest-all:1.1"
		testCompile "org.mockito:mockito-all:$mockitoVersion"
		testCompile "org.springframework:spring-test:$springVersion"
		jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.3.201107060350", classifier: "runtime"
	}

	// enable all compiler warnings; individual projects may customize further
	xLintArg = '-Xlint:all'
	[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

	test {
		// suppress all console output during testing unless running `gradle -i`
		logging.captureStandardOutput(LogLevel.INFO)
		jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=org.springframework.nanotrader.*"
		//		jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000'
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	install {
		repositories.mavenInstaller { customizePom(pom, subproject) }
	}

}


project('spring-nanotrader-service-support') {
	description = 'Spring Nanotrader Data Service Support'

	dependencies {
		compile project(":spring-nanotrader-data")
		compile "org.springframework.integration:spring-integration-amqp:$springIntegrationVersion"
		compile "net.sf.dozer:dozer:$dozerVersion"
		compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
		compile  "joda-time:joda-time:1.6"

		
	}
}

project('spring-nanotrader-data') {
	description = 'Spring Nanotrader Data'
	dependencies {
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final"
		compile "org.springframework.data:spring-data-jpa:1.0.2.RELEASE"
		compile "org.apache.commons:commons-lang3:$commonsLangVersion"
		compile "javax.validation:validation-api:1.0.0.GA"
		compile "org.hibernate:hibernate-validator:4.2.0.Final"
		compile "commons-dbcp:commons-dbcp:1.3"
		compile "org.hibernate:hibernate-core:3.6.8.Final"
		compile "org.hibernate:hibernate-entitymanager:3.6.8.Final"
		compile "org.aspectj:aspectjrt:$aspectjVersion"
		compile "org.springframework:spring-aspects:$springVersion"
		compile "postgresql:postgresql:9.0-801.jdbc3"

	}
}


project('spring-nanotrader-services') {
	apply plugin: 'war'

	description = 'Spring Nanotrader Services'
	dependencies {
		compile project(":spring-nanotrader-data")
		compile project(":spring-nanotrader-service-support")
		compile "org.springframework:spring-webmvc:$springVersion"
		providedCompile  ("javax.servlet:servlet-api:$servletApiVersion")
		compile "com.jayway.jsonpath:json-path:0.5.5"
		compile "cglib:cglib-nodep:$cglibVersion"
		compile "org.springframework.security:spring-security-web:$springSecurityVersion" 
		compile "org.springframework.security:spring-security-config:$springSecurityVersion" 
		compile "org.codehaus.jackson:jackson-mapper-asl:1.8.5"
		compile "javax.inject:javax.inject:$javaxInjectVersion"
		compile "net.sf.dozer:dozer:$dozerVersion"
		testCompile "org.springframework:spring-test-mvc:1.0.0.BUILD-SNAPSHOT"
		compile "org.aspectj:aspectjweaver:$aspectjVersion"
		
			
		
	}

}


project('spring-nanotrader-asynch-services') {
	apply plugin: 'war'

	description = 'Spring Nanotrader Asynch Services'
	dependencies {
		compile project(":spring-nanotrader-data")
		compile project(":spring-nanotrader-service-support")
		compile "org.springframework:spring-webmvc:$springVersion"
		providedCompile  ("javax.servlet:servlet-api:$servletApiVersion")
		compile "com.jayway.jsonpath:json-path:0.5.5"
		compile "cglib:cglib-nodep:$cglibVersion"
		compile "org.codehaus.jackson:jackson-mapper-asl:1.8.5"
		compile "javax.inject:javax.inject:$javaxInjectVersion"
		compile "net.sf.dozer:dozer:$dozerVersion"
		testCompile "org.springframework:spring-test-mvc:1.0.0.BUILD-SNAPSHOT"
		compile "org.aspectj:aspectjweaver:$aspectjVersion"

	}

}




apply plugin: 'docbook-reference'

reference { sourceDir = file('src/reference/docbook') }

apply plugin: 'sonar'

sonar {

	if (rootProject.hasProperty('sonarHostUrl')) {
		server.url = rootProject.sonarHostUrl
	}

	database {
		if (rootProject.hasProperty('sonarJdbcUrl')) {
			url = rootProject.sonarJdbcUrl
		}
		if (rootProject.hasProperty('sonarJdbcDriver')) {
			driverClassName = rootProject.sonarJdbcDriver
		}
		if (rootProject.hasProperty('sonarJdbcUsername')) {
			username = rootProject.sonarJdbcUsername
		}
		if (rootProject.hasProperty('sonarJdbcPassword')) {
			password = rootProject.sonarJdbcPassword
		}
	}

	project {
		dynamicAnalysis  = "reuseReports"
		withProjectProperties { props ->
			props["sonar.core.codeCoveragePlugin"] = "jacoco"
			props["sonar.jacoco.reportPath"]       = "${buildDirName}/jacoco.exec"
		}
	}

	logger.info("Sonar parameters used: server.url='${server.url}'; database.url='${database.url}'; database.driverClassName='${database.driverClassName}'; database.username='${database.username}'")

}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'
	source subprojects.collect { project ->
		project.sourceSets.main.allJava
	}
	destinationDir = new File(buildDir, "api")
	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-integration/docs."

	from('src/dist') { include 'changelog.txt' }

	from (api) { into 'api' }

	from (reference) { into 'reference' }
}

task distZip(type: Zip, dependsOn: [docsZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
			"suitable for community download page."

	baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) { into "${baseDir}/docs" }

	subprojects.each { subproject ->
		into ("${baseDir}/libs") {
			from subproject.jar
			from subproject.sourcesJar
			from subproject.javadocJar
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.0-milestone-8'
	distributionUrl = 'http://repo.gradle.org/gradle/distributions-snapshots/gradle-1.0-milestone-8-20120112000036+0100-bin.zip'
	jarFile = '.wrapper/gradle-wrapper.jar'
}

def customizePom(def pom, def gradleProject) {
	pom.whenConfigured { generatedPom ->
		// respect 'optional' and 'provided' dependencies
		def deps = gradleProject.configurations.runtime.allDependencies
		def optionalDeps = deps.findAll { dep ->
			dep.asDynamicObject.hasProperty('optional') && dep.optional
		}
		def providedDeps = deps.findAll { dep ->
			dep.asDynamicObject.hasProperty('provided') && dep.provided
		}
		generatedPom.dependencies.each { mavenDep ->
			mavenDep.optional = optionalDeps.any { optionalDep ->
				optionalDep.group == mavenDep.groupId &&
						optionalDep.name == mavenDep.artifactId &&
						optionalDep.version == mavenDep.version
			}
			boolean isProvided = providedDeps.any { providedDep ->
				providedDep.group == mavenDep.groupId &&
						providedDep.name == mavenDep.artifactId &&
						providedDep.version == mavenDep.version
			}
			if (isProvided) {
				mavenDep.scope = 'provided'
			}
		}

		// eliminate test-scoped dependencies (no need in maven central poms)
		generatedPom.dependencies.removeAll { dep ->
			dep.scope == 'test'
		}

		// add all items necessary for maven central publication
		generatedPom.project {
			name = gradleProject.description
			description = gradleProject.description
			url = 'https://github.com/SpringSource/spring-nanotrader'
			organization {
				name = 'SpringSource'
				url = 'http://springsource.org'
			}
			licenses {
				license {
					name 'The Apache Software License, Version 2.0'
					url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					distribution 'repo'
				}
			}
			scm {
				url = 'https://github.com/SpringSource/nanotrader'
				connection = 'scm:git:git://github.com/SpringSource/nanotrader'
				developerConnection = 'scm:git:git://github.com/SpringSource/nanotrader'
			}
			developers {
				developer {
					id = 'dussab'
					name = 'Brian Dussault'
					email = 'bdussault@vmware.com'
				}
				developer {
					id = 'garyrussell'
					name = 'Gary Russell'
					email = 'grussell@vmware.com'
				}
			}
		}
	}
}

